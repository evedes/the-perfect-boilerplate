name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create cache directory
        run: mkdir -p /tmp/.buildx-cache

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker images
        run: |
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --push \
            -t ghcr.io/${{ github.repository }}/backend:latest \
            ./backend

          docker buildx build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --push \
            -t ghcr.io/${{ github.repository }}/frontend:latest \
            ./frontend

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code (for access to docker-compose-the-perfect-boilerplate.yaml)
        uses: actions/checkout@v4

      - name: Copy docker-compose-the-perfect-boilerplate.yaml to Digital Ocean Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          source: "docker-compose-the-perfect-boilerplate.yaml"
          target: /home/${{ secrets.DROPLET_USER}}/
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository }}/backend:latest
            docker pull ghcr.io/${{ github.repository }}/frontend:latest

            # Create .env file with secrets
            cat > /home/${{ secrets.DROPLET_USER }}/.env.the-perfect-boilerplate << EOF
            NODE_ENV=${{ secrets.NODE_ENV }}
            API_PORT=${{ secrets.API_PORT }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            API_URL=${{ secrets.API_URL }}
            EOF

            docker compose -f docker-compose-the-perfect-boilerplate.yaml --env-file .env.the-perfect-boilerplate up -d
            docker compose -f docker-compose-reverseproxy.yaml restart

      - name: Run migrations on the DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            # Wait for database to be ready
            timeout=60
            counter=0
            until docker exec the-perfect-boilerplate-db pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} > /dev/null 2>&1; do
              counter=$((counter+1))
              if [ $counter -ge $timeout ]; then
                echo "Database failed to become ready in time"
                exit 1
              fi
              echo "Waiting for database... ($counter/$timeout)"
              sleep 1
            done

            echo "Database is ready, running migrations..."
            docker exec the-perfect-boilerplate-backend pnpm typeorm migration:run -d /app/dist/data-source.js

      - name: List and remove non-latest images in Digital Ocean Droplet
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            images=$(docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep -v ':latest' || true)

            if [ -z "$images" ]; then
              echo "No non-latest images to remove"
              exit 0
            fi

            echo "Images to be removed:"
            echo "$images"

            while IFS= read -r image; do
              if [ -n "$image" ]; then
                repo_tag=$(echo $image | awk '{print $1}')
                image_id=$(echo $image | awk '{print $2}')
                echo "Removing image $repo_tag with ID $image_id"
                docker rmi "$image_id" || true
              fi
            done <<< "$images"
